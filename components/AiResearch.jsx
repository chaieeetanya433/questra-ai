'use client'

import React, { useState, useRef, useEffect } from 'react';
import { Search, FileText, Download, Loader2, Brain, Sparkles, AlertCircle, Github, Linkedin, Globe } from 'lucide-react';

const AIResearcherApp = () => {
    const [topic, setTopic] = useState('');
    const [summary, setSummary] = useState('');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const [progress, setProgress] = useState(0);
    const [currentDate, setCurrentDate] = useState('');
    const summaryRef = useRef(null);

    useEffect(() => {
        setCurrentDate(new Date().toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        }));
    }, []);

    const handleSubmit = async () => {
        if (!topic.trim()) return;

        setLoading(true);
        setSummary('');
        setError('');
        setProgress(0);

        try {
            // Simulate progress updates
            const progressInterval = setInterval(() => {
                setProgress(prev => Math.min(prev + Math.random() * 15, 85));
            }, 500);

            const res = await fetch('/api/research', {
                method: 'POST',
                body: JSON.stringify({ topic: topic.trim() }),
                headers: { 'Content-Type': 'application/json' },
            });

            clearInterval(progressInterval);
            setProgress(90);

            const text = await res.text();
            let data;

            try {
                data = JSON.parse(text);
            } catch {
                throw new Error('Invalid response format from server');
            }

            if (res.ok && data.success) {
                setSummary(data.summary);
                setProgress(100);
                setTimeout(() => setProgress(0), 1000);
            } else {
                throw new Error(data.error || 'Research failed. Please try again.');
            }
        } catch (err) {
            setError(err.message);
            setProgress(0);
        } finally {
            setLoading(false);
        }
    };

    const handleDownloadPDF = async () => {
        if (!summaryRef.current || !summary) return;

        try {
            // Try window.print() as fallback if html2pdf fails
            const tryPrintFallback = () => {
                const printWindow = window.open('', '_blank');
                const printContent = `
          <!DOCTYPE html>
          <html>
            <head>
              <title>Questra Research Report - ${topic}</title>
              <style>
                body { 
                  font-family: Arial, sans-serif; 
                  line-height: 1.6; 
                  max-width: 800px; 
                  margin: 0 auto; 
                  padding: 20px;
                  color: #333;
                }
                h1 { color: #1f2937; font-size: 28px; margin-bottom: 10px; }
                h2 { color: #374151; font-size: 24px; margin-top: 30px; margin-bottom: 15px; }
                h3 { color: #4b5563; font-size: 20px; margin-top: 25px; margin-bottom: 10px; }
                p { margin-bottom: 15px; }
                li { margin-bottom: 8px; }
                strong { color: #1f2937; }
                .header { 
                  border-bottom: 2px solid #e5e7eb; 
                  padding-bottom: 20px; 
                  margin-bottom: 30px; 
                }
                .date { color: #6b7280; font-size: 14px; }
                @media print {
                  body { margin: 0; }
                  .no-print { display: none; }
                }
              </style>
            </head>
            <body>
              <div class="header">
                <h1>Research Report: ${topic}</h1>
                <p class="date">Generated by Questra on ${currentDate}</p>
              </div>
              ${summaryRef.current.querySelector('div[class*="prose"]')?.innerHTML || summary}
            </body>
          </html>
        `;

                printWindow.document.write(printContent);
                printWindow.document.close();
                printWindow.focus();
                setTimeout(() => {
                    printWindow.print();
                    printWindow.close();
                }, 250);
            };

            // First, try html2pdf
            try {
                const html2pdf = (await import('html2pdf.js')).default;

                // Create a clean version for PDF
                const cleanContent = document.createElement('div');
                cleanContent.innerHTML = summaryRef.current.innerHTML;
                cleanContent.style.backgroundColor = 'white';
                cleanContent.style.color = 'black';
                cleanContent.style.fontFamily = 'Arial, sans-serif';
                cleanContent.style.padding = '20px';
                cleanContent.style.maxWidth = '800px';

                const opt = {
                    margin: [0.5, 0.5, 0.5, 0.5],
                    filename: `Questra_${topic.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, '_')}_Report.pdf`,
                    image: {
                        type: 'jpeg',
                        quality: 0.92
                    },
                    html2canvas: {
                        scale: 1.5,
                        useCORS: true,
                        backgroundColor: '#ffffff',
                        logging: false,
                        letterRendering: true
                    },
                    jsPDF: {
                        unit: 'in',
                        format: 'a4',
                        orientation: 'portrait'
                    },
                    pagebreak: { mode: ['avoid-all', 'css', 'legacy'] }
                };

                await html2pdf().set(opt).from(cleanContent).save();

            } catch (pdfError) {
                console.warn('html2pdf failed, using print fallback:', pdfError);
                tryPrintFallback();
            }

        } catch (err) {
            console.error('PDF generation error:', err);
            setError('PDF generation failed. Your browser print dialog will open as an alternative.');

            // Final fallback - simple print
            setTimeout(() => {
                window.print();
            }, 1000);
        }
    };


    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !loading && topic.trim()) {
            handleSubmit();
        }
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-800 text-white relative overflow-hidden">
            {/* Animated background elements */}
            <div className="absolute inset-0 opacity-10 sm:opacity-20">
                <div className="absolute top-1/4 left-1/4 w-48 h-48 sm:w-64 md:w-80 lg:w-96 sm:h-64 md:h-80 lg:h-96 bg-blue-500 rounded-full mix-blend-multiply filter blur-2xl sm:blur-3xl animate-pulse"></div>
                <div className="absolute top-3/4 right-1/4 w-48 h-48 sm:w-64 md:w-80 lg:w-96 sm:h-64 md:h-80 lg:h-96 bg-purple-500 rounded-full mix-blend-multiply filter blur-2xl sm:blur-3xl animate-pulse delay-1000"></div>
                <div className="absolute bottom-1/4 left-1/2 w-48 h-48 sm:w-64 md:w-80 lg:w-96 sm:h-64 md:h-80 lg:h-96 bg-cyan-500 rounded-full mix-blend-multiply filter blur-2xl sm:blur-3xl animate-pulse delay-2000"></div>
            </div>

            <div className="relative z-10 min-h-screen flex items-center justify-center p-4 sm:p-6 lg:p-8">
                <div className="w-full max-w-4xl space-y-6 sm:space-y-8">
                    {/* Header */}
                    <div className="text-center space-y-3 sm:space-y-4">
                        <div className="flex items-center justify-center space-x-2 sm:space-x-3 mb-3 sm:mb-4">
                            <div className="relative">
                                <Brain className="w-8 h-8 sm:w-10 md:w-12 sm:h-10 md:h-12 text-cyan-400" />
                                <Sparkles className="w-4 h-4 sm:w-5 md:w-6 sm:h-5 md:h-6 text-yellow-400 absolute -top-1 -right-1 animate-pulse" />
                            </div>
                        </div>
                        <h1 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-bold bg-gradient-to-r from-white via-cyan-200 to-blue-400 bg-clip-text text-transparent leading-tight">
                            Questra
                        </h1>
                        <p className="text-base sm:text-lg md:text-xl text-gray-400 max-w-2xl mx-auto px-2">
                            AI-Powered Research Agent - Transform any topic into comprehensive research reports
                        </p>
                    </div>

                    {/* Search Section */}
                    <div className="backdrop-blur-xl bg-white/5 border border-white/10 rounded-xl sm:rounded-2xl p-4 sm:p-6 lg:p-8 shadow-2xl">
                        <div className="space-y-4 sm:space-y-6">
                            <div className="relative">
                                <Search className="absolute left-3 sm:left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4 sm:w-5 sm:h-5" />
                                <input
                                    type="text"
                                    className="w-full pl-10 sm:pl-12 pr-4 py-3 sm:py-4 bg-black/20 border border-white/20 rounded-lg sm:rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-500/50 focus:border-cyan-500/50 transition-all duration-300 text-base sm:text-lg backdrop-blur-sm"
                                    placeholder="Enter your research topic..."
                                    value={topic}
                                    onChange={(e) => setTopic(e.target.value)}
                                    onKeyPress={handleKeyPress}
                                    disabled={loading}
                                />
                            </div>

                            {/* Progress Bar */}
                            {loading && (
                                <div className="space-y-2">
                                    <div className="flex items-center justify-between text-xs sm:text-sm text-gray-400">
                                        <span>Researching...</span>
                                        <span>{Math.round(progress)}%</span>
                                    </div>
                                    <div className="w-full bg-gray-700/50 rounded-full h-1.5 sm:h-2 overflow-hidden">
                                        <div
                                            className="bg-gradient-to-r from-cyan-500 to-blue-500 h-1.5 sm:h-2 rounded-full transition-all duration-500 ease-out"
                                            style={{ width: `${progress}%` }}
                                        ></div>
                                    </div>
                                </div>
                            )}

                            <button
                                onClick={handleSubmit}
                                disabled={loading || !topic.trim()}
                                className="w-full bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-700 hover:to-blue-700 disabled:from-gray-600 disabled:to-gray-700 disabled:cursor-not-allowed text-white px-6 sm:px-8 py-3 sm:py-4 rounded-lg sm:rounded-xl font-semibold text-base sm:text-lg transition-all duration-300 transform hover:scale-[0.98] active:scale-95 shadow-lg disabled:transform-none flex items-center justify-center space-x-2 sm:space-x-3"
                            >
                                {loading ? (
                                    <>
                                        <Loader2 className="w-4 h-4 sm:w-5 sm:h-5 animate-spin" />
                                        <span className="truncate">Generating Report...</span>
                                    </>
                                ) : (
                                    <>
                                        <FileText className="w-4 h-4 sm:w-5 sm:h-5" />
                                        <span className="truncate">Generate Research Report</span>
                                    </>
                                )}
                            </button>
                        </div>
                    </div>

                    {/* Error Display */}
                    {error && (
                        <div className="backdrop-blur-xl bg-red-500/10 border border-red-500/20 rounded-xl sm:rounded-2xl p-4 sm:p-6 shadow-2xl">
                            <div className="flex items-start sm:items-center space-x-3 text-red-400">
                                <AlertCircle className="w-5 h-5 sm:w-6 sm:h-6 flex-shrink-0 mt-0.5 sm:mt-0" />
                                <p className="text-sm sm:text-base lg:text-lg break-words">{error}</p>
                            </div>
                        </div>
                    )}

                    {/* Results Section */}
                    {summary && (
                        <div className="space-y-4 sm:space-y-6">
                            {/* PDF Preview */}
                            <div
                                ref={summaryRef}
                                className="backdrop-blur-xl bg-white/95 text-gray-900 rounded-xl sm:rounded-2xl shadow-2xl overflow-hidden"
                            >
                                <div className="bg-gradient-to-r from-gray-800 to-gray-900 p-4 sm:p-6 text-white">
                                    <h2 className="text-lg sm:text-xl md:text-2xl font-bold flex items-start sm:items-center space-x-2 sm:space-x-3">
                                        <FileText className="w-5 h-5 sm:w-6 sm:h-6 text-cyan-400 flex-shrink-0 mt-0.5 sm:mt-0" />
                                        <span className="break-words">Research Report: {topic}</span>
                                    </h2>
                                    <p className="text-gray-300 mt-2 text-sm sm:text-base">
                                        Generated by Questra on {currentDate || 'Loading...'}
                                    </p>
                                </div>

                                <div className="p-4 sm:p-6 lg:p-8 space-y-4 sm:space-y-6">
                                    <div
                                        className="prose prose-sm sm:prose-base lg:prose-lg max-w-none prose-headings:text-gray-800 prose-p:text-gray-700 prose-li:text-gray-700"
                                        style={{
                                            fontSize: 'clamp(0.875rem, 2.5vw, 1rem)',
                                            lineHeight: '1.6'
                                        }}
                                        dangerouslySetInnerHTML={{
                                            __html: summary
                                                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                                                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                                                .replace(/^#{1}\s(.*)$/gm, '<h1 class="text-2xl sm:text-3xl font-bold text-gray-800 mt-6 sm:mt-8 mb-3 sm:mb-4">$1</h1>')
                                                .replace(/^#{2}\s(.*)$/gm, '<h2 class="text-xl sm:text-2xl font-semibold text-gray-700 mt-4 sm:mt-6 mb-2 sm:mb-3">$1</h2>')
                                                .replace(/^#{3}\s(.*)$/gm, '<h3 class="text-lg sm:text-xl font-medium text-gray-600 mt-3 sm:mt-4 mb-2">$1</h3>')
                                                .replace(/^-\s(.*)$/gm, '<li class="ml-4 mb-1 text-sm sm:text-base">$1</li>')
                                                .replace(/\n\n/g, '</p><p class="mb-3 sm:mb-4 text-sm sm:text-base">')
                                                .replace(/^(?!<[h|l])/gm, '<p class="mb-3 sm:mb-4 text-sm sm:text-base">')
                                                .replace(/<p class="mb-3 sm:mb-4 text-sm sm:text-base">(<h[1-6])/g, '$1')
                                                .replace(/(<\/h[1-6]>)<\/p>/g, '$1')
                                        }}
                                    />
                                </div>
                            </div>

                            {/* Download Button */}
                            <div className="text-center px-4">
                                <button
                                    onClick={handleDownloadPDF}
                                    className="w-full sm:w-auto bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white px-6 sm:px-8 py-3 sm:py-4 rounded-lg sm:rounded-xl font-semibold text-base sm:text-lg transition-all duration-300 transform hover:scale-105 active:scale-95 shadow-lg flex items-center justify-center space-x-2 sm:space-x-3"
                                >
                                    <Download className="w-4 h-4 sm:w-5 sm:h-5" />
                                    <span>Download PDF Report</span>
                                </button>
                            </div>
                        </div>
                    )}
                </div>
            </div>

            {/* Footer */}
            <footer className="relative z-10 backdrop-blur-xl bg-black/20 border-t border-white/10">
                <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8">
                    <div className="flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0">
                        {/* Logo and Copyright */}
                        <div className="flex items-center space-x-3">
                            <div className="relative">
                                <Brain className="w-6 h-6 sm:w-7 sm:h-7 text-cyan-400" />
                                <Sparkles className="w-3 h-3 sm:w-4 sm:h-4 text-yellow-400 absolute -top-0.5 -right-0.5 animate-pulse" />
                            </div>
                            <div className="text-center sm:text-left">
                                <h3 className="text-lg sm:text-xl font-bold text-white">Questra</h3>
                                <p className="text-xs sm:text-sm text-gray-400">© 2025 - AI Research Agent</p>
                            </div>
                        </div>

                        {/* Social Links */}
                        <div className="flex items-center space-x-4 sm:space-x-6">
                            <p className="text-xs sm:text-sm text-gray-400 hidden sm:block">Connect with the creator:</p>
                            <div className="flex items-center space-x-4">
                                <a
                                    href="https://github.com/chaieeetanya433"
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="group flex items-center space-x-2 text-gray-400 hover:text-white transition-colors duration-300"
                                    title="GitHub Profile"
                                >
                                    <Github className="w-5 h-5 sm:w-6 sm:h-6 group-hover:scale-110 transition-transform duration-300" />
                                    <span className="text-sm hidden sm:inline">GitHub</span>
                                </a>
                                <a
                                    href="https://www.linkedin.com/in/chaitanyaagarkar/"
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="group flex items-center space-x-2 text-gray-400 hover:text-blue-400 transition-colors duration-300"
                                    title="LinkedIn Profile"
                                >
                                    <Linkedin className="w-5 h-5 sm:w-6 sm:h-6 group-hover:scale-110 transition-transform duration-300" />
                                    <span className="text-sm hidden sm:inline">LinkedIn</span>
                                </a>
                                <a
                                    href="https://agarkar-chaieeetanyas-portfolio-2025.vercel.app/"
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="group flex items-center space-x-2 text-gray-400 hover:text-cyan-400 transition-colors duration-300"
                                    title="Portfolio Website"
                                >
                                    <Globe className="w-5 h-5 sm:w-6 sm:h-6 group-hover:scale-110 transition-transform duration-300" />
                                    <span className="text-sm hidden sm:inline">Portfolio</span>
                                </a>
                            </div>
                        </div>
                    </div>

                    {/* Attribution Notice */}
                    <div className="mt-4 sm:mt-6 pt-4 sm:pt-6 border-t border-white/10">
                        <p className="text-xs sm:text-sm text-gray-500 text-center max-w-4xl mx-auto leading-relaxed">
                            <strong className="text-gray-400">Important:</strong> This project is protected by copyright.
                            Unauthorized reproduction, distribution, or commercial use without explicit permission is prohibited.
                            For licensing inquiries, please contact the creator through the links above.
                        </p>
                    </div>
                </div>
            </footer>
        </div>
    );
}

export default AIResearcherApp